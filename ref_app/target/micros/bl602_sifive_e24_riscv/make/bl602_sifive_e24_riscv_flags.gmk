#  Copyright Christopher Kormanyos 2025.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
#

# ------------------------------------------------------------------------------
# compiler flags for the target architecture
# ------------------------------------------------------------------------------

GCC_TARGET   := riscv-none-elf
GCC_PREFIX   := riscv-none-elf

GCC_VERSION  := 15.2.0

TGT_SUFFIX    = elf

ARCH         :=  -mcpu=sifive-e24                              \
                 -mabi=ilp32                                   \
                 -msmall-data-limit=0                          \
                 -falign-functions=4

TGT_ALLFLAGS  = -O2                                            \
                $(ARCH)                                        \
                -DPRINTF_INCLUDE_CONFIG_H                      \
                -fomit-frame-pointer                           \
                -fno-reorder-blocks-and-partition              \
                -fno-reorder-functions


TGT_CFLAGS    = -std=c11                                       \
                -Wunsuffixed-float-constants                   \
                $(TGT_ALLFLAGS)

TGT_CXXFLAGS  = -std=c++23                                     \
                -Wno-psabi                                     \
                $(TGT_ALLFLAGS)

TGT_INCLUDES := -I$(PATH_TGT)/Code/Mcal

TGT_AFLAGS    = $(TGT_ALLFLAGS)

TGT_LDFLAGS   = -nostdlib                                      \
                -nostartfiles                                  \
                -Wl,--gc-sections                              \
                -e _start                                      \
                -Wl,-Map,$(APP).map                            \
                -T $(LINKER_DEFINITION_FILE)


OBJCOPY      := $(PATH_TOOLS_CC)/$(GCC_PREFIX)-objcopy.exe

ifeq ($(TYP_OS),WIN)
OBJCOPY      := $(subst /,\,$(PATH_TOOLS_CC)/$(GCC_PREFIX)-objcopy.exe)
endif

NAME_IMAGE_FILE := $(APP)

RULE_SPECIAL_MAKE_IMAGE_FILE   :=    $(ECHO) "+++ creating special image file $(NAME_IMAGE_FILE).img" \
                                  && $(OBJCOPY) $(APP).$(TGT_SUFFIX) -O binary $(NAME_IMAGE_FILE).img

ifeq ($(TYP_OS),WIN)

BL602_BFLASH_TOOL               := $(PATH_TOOLS)/BL602/flasher/blflash.exe

RULE_SPECIAL_MAKE_FLASH_BATCH   :=   $(ECHO) "+++ creating flash batch file $(PATH_BIN)/flash.bat" \
                                  && copy /Y $(subst /,\\,$(BL602_BFLASH_TOOL)) $(subst /,\,$(CURDIR)/bin) > 2 > NUL \
                                  && $(ECHO) "$(subst /,\\,./$(notdir $(BL602_BFLASH_TOOL))) flash ./$(notdir $(NAME_IMAGE_FILE).img) --baud-rate 230400 --initial-baud-rate 230400 --port COM3"> $(CURDIR)/bin/flash.bat

endif
